import requests
from xml.etree import ElementTree as ET

class PMCSearch:
    BASE_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"

    def __init__(self, api_key: str | None = None):
        self.api_key = api_key

    def search(self, query: str, retmax: int = 20, retstart: int = 0, sort: str | None = None, use_history: bool = False):
        """
        Search PMC for a query.
        Returns a dict with:
            - 'ids': list of PMCIDs
            - 'count': total results
            - 'webenv': WebEnv (if use_history=True)
            - 'query_key': QueryKey (if use_history=True)
        """
        params = {
            "db": "pmc",
            "term": query,
            "retmax": retmax,
            "retstart": retstart,
        }
        if sort:
            params["sort"] = sort
        if use_history:
            params["usehistory"] = "y"
        if self.api_key:
            params["api_key"] = self.api_key

        r = requests.get(self.BASE_URL, params=params)
        r.raise_for_status()
        root = ET.fromstring(r.text)

        ids = [id_elem.text for id_elem in root.findall(".//Id")]
        count = int(root.findtext("Count", "0"))

        result = {"ids": ids, "count": count}
        if use_history:
            result["webenv"] = root.findtext("WebEnv")
            result["query_key"] = root.findtext("QueryKey")

        return result

    def fetch_all(self, query: str, batch_size: int = 20, sort: str | None = None):
        """
        Generator to fetch all PMCIDs for a query, using paging automatically.
        """
        retstart = 0
        while True:
            res = self.search(query, retmax=batch_size, retstart=retstart, sort=sort)
            ids = res["ids"]
            if not ids:
                break
            yield from ids
            retstart += len(ids)
            if retstart >= res["count"]:
                break

# Example usage
if __name__ == "__main__":
    api_key = None  # or your API key as a string
    api = PMCSearch(api_key)

    print("\nFetching all results in batches of 10000:")
    cntr = 0
    for pmcid in api.fetch_all("CRISPR[Title/Abstract] AND 2022:2025[pdat]", batch_size=10000):
        print(f"PMC{pmcid}")
        cntr += 1
    print(f"Total fetched: {cntr}")
